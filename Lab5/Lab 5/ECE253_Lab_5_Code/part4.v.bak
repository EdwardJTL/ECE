module part4(SW, KEY, HEX0, HEX1, HEX2, HEX3)
  input [1:0] SW;
  input KEY[0];
  output [6:0] HEX0, HEX1, HEX2, HEX3;
  wire reg [15:0] Q;

  always @(posedge KEY[0])
  begin
    if (SW[0] == 0)
      Q = 16'b0;
    else
      Q <= Q + 1;
  end

  binary_7seg h0(Q[3:0], HEX0);
  binary_7seg h1(Q[7:4], HEX1);
  binary_7seg h2(Q[11:8], HEX2);
  binary_7seg h3(Q[15:12], HEX3);

endmodule

module binary_7seg ( C, Display);
   input [3:0] C;
   output reg [6:0] Display;
   always @(C)
   case(C)
      4'h0:
        Display = 7'b0000001;
      4'h1:
        Display = 7'b1001111;
      4'h2:
        Display = 7'b0010010;
      4'h3:
        Display = 7'b0000110;
      4'h4:
        Display = 7'b1001100;
      4'h5:
        Display = 7'b0100100;
      4'h6:
        Display = 7'b0100000;
      4'h7:
        Display = 7'b0001111;
      4'h8:
        Display = 7'b0000000;
      4'h9:
        Display = 7'b0001100;
      4'hA:
        Display = 7'b0001000;
      4'hB:
        Display = 7'b1100000;
      4'hC:
        Display = 7'b1110010;
      4'hD:
        Display = 7'b1000010;
      4'hE:
        Display = 7'b0110000;
      4'hF:
        Display = 7'b0111000;
      default:
        Display = 7'b1111111;
   endcase
endmodule // binary_7seg
